package lesson5;

import java.util.Arrays;
import java.util.Objects;

public class StringLesson {
    public static void main(String[] args) {
        // char - –æ–¥–∏–Ω 16 –±–∏—Ç–Ω—ã–π —Å–∏–º–≤–æ–ª Unicode
        // –æ—Ç 0 –¥–æ 65536 / –æ—Ç '\u0000' –¥–æ '\uffff'

        // –º–æ–∂–Ω–æ –∑–∞–¥–∞—Ç—å:
        char char1 = 'J'; // —Å–∞–º —Å–∏–º–≤–æ–ª –≤ –æ–¥–∏–Ω–∞—Ä–Ω—ã—Ö –∫–∞–≤—ã—á–∫–∞—Ö
        char char2 = 74; // –Ω–æ–º–µ—Ä —Å–∏–º–≤–æ–ª–∞
        char char3 = '\u0044'; // —à–µ—Å–Ω–∞–¥—Ü–∞—Ç–∏—Ä–∏—á–Ω–æ–µ –ø—Ä–µ–¥—Å—Ç–∞–≤–ª–µ–Ω–∏–µ
        // –≤ escape –ø–æ—Å–ª–µ–¥–æ–≤–∞—Ç–µ–ª—å–Ω–æ—Å—Ç–∏
        System.out.print(char1); // J
        System.out.print(char2); // J
        System.out.print(char3); // D

        System.out.println("\n–°—Ç—Ä–æ–∫–∏");
        // –°—Ç—Ä–æ–∫–∞ - —É–ø–æ—Ä—è–¥–æ—á–µ–Ω–Ω–∞—è –ø–æ—Å–ª–µ–¥–æ–≤–∞—Ç–µ–ª—å–Ω–æ—Å—Ç—å —Å–∏–º–≤–æ–ª–æ–≤
        // –°—Ç—Ä–æ–∫–∏ - –æ–±—ä–µ–∫—Ç—ã (—Å—Å—ã–ª–æ—á–Ω—ã–π —Ç–∏–ø) –∫–ª–∞—Å—Å–∞ String
        // –°—Ç—Ä–æ–∫–∏ –∑–∞–¥–∞—é—Ç—Å—è:
        //     –≤ ""
        //     –∏—Å–ø–æ–ª—å–∑—É—è new String() –∏—Å–ø–æ–ª—å–∑–æ–≤–∞—Ç—å, –µ—Å–ª–∏ —Å–æ–∑–¥–∞–Ω–∏–µ —á–µ—Ä–µ–∑ ""
        //     –Ω–µ –ø–æ–¥—Ö–æ–¥–∏—Ç
        // –°—Ç—Ä–æ–∫–∏ –Ω–µ–ª—å–∑—è –∏–∑–º–µ–Ω–∏—Ç—å, –º–æ–∂–Ω–æ —Ç–æ–ª—å–∫–æ —Å–æ–∑–¥–∞—Ç—å –Ω–æ–≤—É—é
        // –Ω–∞ –æ—Å–Ω–æ–≤–µ —Å—É—â–µ—Å—Ç–≤—É—é—â–µ–π
        // –í—Å–µ —Å—Ç—Ä–æ–∫–æ–≤—ã–µ –ª–∏—Ç–µ—Ä–∞–ª—ã,
        // –Ω–∞–ø—Ä–∏–º–µ—Ä System.out.println("–°—Ç—Ä–æ–∫–∏"); —Ä–µ–∞–ª–∏–∑–æ–≤–∞–Ω—ã
        // –∫–∞–∫ —ç–∫–∑–µ–º–ø–ª—è—Ä—ã String

        char[] jjdChars = {'\u004A', '\u004A', '\u0044'};
        String jjdString = new String(jjdChars);
        jjdString = "\u004A\u004A\u0044";
        System.out.println(jjdString); // JJD
        System.out.println(jjdString.length()); // 3
        System.out.println(jjdString.codePoints().count()); // 3

        char[] frogChars = {'\uD83D', '\uDC38'};
        String frogString = new String(frogChars);
        frogString = "\uD83D\uDC38";
        System.out.println(frogString); // üê∏
        System.out.println(frogString.length()); // 2
        System.out.println(frogString.codePoints().count()); // 1

        // –∫–∞–∂–¥—ã–π —Å–∏–º–≤–æ–ª Unicode –º–æ–∂–µ—Ç –±—ã—Ç—å –ø—Ä–µ–¥—Å—Ç–∞–≤–ª–µ–Ω
        // –æ–¥–Ω–∏–º –∏–ª–∏ –ø–∞—Ä–æ–π (—Å—É—Ä—Ä–æ–≥–∞—Ç–Ω–∞—è –ø–∞—Ä–∞) —á–∞—Ä–æ–≤

        // —Ö—Ä–∞–Ω–µ–Ω–∏–µ —Å—Ç—Ä–æ–∫ –¥–æ java 9: –º–∞—Å—Å–∏–≤ char[] –≤ –∫–æ–¥–∏—Ä–æ–≤–∫–µ UTF-16,
        // –ø—Ä–∏ —ç—Ç–æ–º –∫–∞–∂–¥—ã–π char –±—ã–ª –ø—Ä–µ–¥—Å—Ç–∞–≤–ª–µ–Ω –¥–≤—É–º—è –±–∞–π—Ç–∞–º–∏

        // —Ö—Ä–∞–Ω–µ–Ω–∏–µ —Å—Ç—Ä–æ–∫ –Ω–∞—á–∏–Ω–∞—è —Å java9 (–∫–æ–º–ø–∞–∫—Ç–Ω—ã–µ —Å—Ç—Ä–æ–∫–∏):
        // –º–∞—Å—Å–∏–≤ byte[] + –∫–æ–¥–∏—Ä–æ–≤–∫–∞ UTF-16 –∏–ª–∏ LATIN1

        System.out.println("–ü—É–ª —Å—Ç—Ä–æ–∫");
        // –ø—É–ª —Å—Ç—Ä–æ–∫ (–Ω–∞—Ö–æ–¥–∏—Ç—Å—è –≤ heap –ø–∞–º—è—Ç–∏) —Ö—Ä–∞–Ω–∏—Ç —Ç–æ–ª—å–∫–æ –æ–¥–Ω—É
        // –∫–æ–ø–∏—é –∫–∞–∂–¥–æ–≥–æ —Å—Ç—Ä–æ–∫–æ–≤–æ–≥–æ –ª–∏—Ç–µ—Ä–∞–ª–∞
        String string1 = "–°—Ç—Ä–æ–∫–∞";
        String string2 = "–°—Ç—Ä–æ–∫–∞";
        String string3 = new String("–°—Ç—Ä–æ–∫–∞");

        System.out.println(string1 == string2); // true
        System.out.println(string1 == string3); // false

        System.out.println("–ú–µ—Ç–æ–¥ intern()");
        String internStr = string3.intern(); // —Å–æ—Ö—Ä–∞–Ω–µ–Ω–∏–µ —Å—Ç—Ä–æ–∫–∏
        // –≤ –ø—É–ª–µ —Å—Ç—Ä–æ–∫/–≤–æ–∑–≤—Ä–∞—â–µ–Ω–∏–µ —Å—Å—ã–ª–∫–∏ –Ω–∞ —Å—É—â–µ—Å—Ç–≤—É—é—â–∏–π –æ–±—ä–µ–∫—Ç
        System.out.println(string1 == internStr); // true
        System.out.println(string3 == internStr); // false
        System.out.println(string2 == internStr); // true

        System.out.println("–°—Ä–∞–≤–Ω–µ–Ω–∏–µ —Å—Ç—Ä–æ–∫ - equals()");
        string1 = "–°—Ç—Ä–æ–∫–∞";
        string2 = "–°—Ç—Ä–æ–∫–∞";
        System.out.println(string1.equals(string2)); // true
        System.out.println("—Å—Ç—Ä–æ–∫–∞".equals(string1)); // false
        System.out.println("—Å—Ç—Ä–æ–∫–∞".equalsIgnoreCase(string1)); // true

        // –≤–∞—Ä–∏–∞–Ω—Ç "—Å—Ç—Ä–æ–∫–∞".equals(string1) –ª—É—á—à–µ, —á–µ–º
        // string1.equals("—Å—Ç—Ä–æ–∫–∞")

        String nullString = null;
        System.out.println("—Å—Ç—Ä–æ–∫–∞".equals(nullString)); // false
        //System.out.println(nullString.equals("—Å—Ç—Ä–æ–∫–∞")); // java.lang.NullPointerException

        System.out.println(nullString == null); // true
        System.out.println(null != null); // false
        System.out.println(Objects.nonNull(nullString)); // false
        System.out.println(Objects.isNull(nullString)); // true

        // –¥–∞–Ω –º–∞—Å—Å–∏–≤ animals {"–∫–æ—Ç", "–ø—ë—Å", "–≥—É—Å—å"}
        // —Å–æ–∑–¥–∞—Ç—å –Ω–æ–≤—ã–π –º–∞—Å—Å–∏–≤
        // (–∫–æ–ª–∏—á–µ—Å—Ç–≤–æ —ç–ª–µ–º–µ–Ω—Ç–æ–≤, –±–æ–ª—å—à–µ —á–µ–º —É animals –≤ 2 —Ä–∞–∑–∞)
        // –∑–∞–ø–æ–ª–Ω–∏—Ç—å –µ–≥–æ —Ä–∞–Ω–¥–æ–º–Ω—ã–º–∏ –∑–Ω–∞—á–µ–Ω–∏—è–º–∏ –∏–∑ –º–∞—Å—Å–∏–≤–∞ animals

        String[] animals = {"–∫–æ—Ç", "–ø—ë—Å", "–≥—É—Å—å"};
        String[] newArr = new String[animals.length * 2];

        for (int i = 0; i < newArr.length; i++) {
            newArr[i] = animals[(int) (Math.random() * animals.length)];
        }
        System.out.println(Arrays.toString(newArr));

        System.out.println("–ö–æ–Ω–∫–∞—Ç–µ–Ω–∞—Ü–∏—è —Å—Ç—Ä–æ–∫");
        string1 = "Java";
        string2 = "Python";

        // 1 –≤–∞—Ä–∏–∞–Ω—Ç: +
        String concatStr = string1 + " :: " + string2;
        System.out.println(concatStr);

        // 2 –≤–∞—Ä–∏–∞–Ω—Ç: —Å—Ç—Ä–æ–∫–∞.concat()
        concatStr = string1.concat(" :: ").concat(string2);
        System.out.println(concatStr);

        // 3 –≤—ã—Ä–∏–∞–Ω—Ç: String.join(—Ä–∞–∑–¥–µ–ª—å—Ç–µ–ª—å, —Å—Ç—Ä–æ–∫–∞1, —Å—Ç—Ä–æ–∫–∞2, —Å—Ç—Ä–æ–∫–∞N);
        concatStr = String.join(" :: ", string1, string2);
        System.out.println(concatStr);

        System.out.println("–ë—É—Ñ–µ—Ä–∏–∑–∏—Ä–æ–≤–∞–Ω–Ω—ã–µ —Å—Ç—Ä–æ–∫–∏");
        concatStr = "";
        for (int i = 0; i < 10; i++) {
            concatStr += i + " ";
        }
        System.out.println(concatStr);

        // StringBuilder - —Ä–∞–±–æ—Ç–∞–µ—Ç –±—ã—Å—Ç—Ä–µ–µ, –Ω–æ –Ω–µ —è–≤–ª—è–µ—Ç—Å—è –ø–æ—Ç–æ–∫–æ–±–µ–∑–æ–ø–∞—Å–Ω—ã–º
        // StringBuffer - —Ä–∞–±–æ—Ç–∞–µ—Ç –º–µ–¥–ª–µ–Ω–Ω–µ–µ, –Ω–æ –ø–æ—Ç–æ–∫–æ–±–µ–∑–æ–ø–∞—Å–µ–Ω

        StringBuilder sb = new StringBuilder(string1);
        sb.append(" :: ").append(string2);
        concatStr = sb.toString();
        System.out.println(concatStr);

        concatStr = "";
        sb = new StringBuilder();
        for (int i = 0; i < 10; i++) {
            sb.append(i).append(" ");
        }
        concatStr = sb.toString();
        System.out.println(concatStr);

        // —Å—Ä–∞–≤–Ω–µ–Ω–∏–µ —Å—Ç—Ä–æ–∫
        // C:1057 c:1089
        System.out.println("—Å—Ç—Ä–æ–∫–∞".compareTo("—Å—Ç—Ä–æ–∫–∞")); // 0
        System.out.println("—Å—Ç—Ä–æ–∫–∞".compareTo("C—Ç—Ä–æ–∫–∞")); // 32
        System.out.println("–°—Ç—Ä–æ–∫–∞".compareTo("—Å—Ç—Ä–æ–∫–∞")); // -32
        System.out.println("—Å—Ç—Ä–æ–∫–∞".compareToIgnoreCase("C—Ç—Ä–æ–∫–∞")); // 0

        // start / end
        string1 = "JJD";
        System.out.println(string1.startsWith("JJ")); // true
        System.out.println(string1.startsWith("D", 2)); // true
        System.out.println(string1.endsWith("d")); // false

        // –ø—Ä–∏–≤–µ–¥–µ–Ω–∏–µ –∫ —Ä–µ–≥–∏—Å—Ç—Ä—É
        string1 = string1.toLowerCase();
        string1 = string1.toUpperCase();

        // –∑–∞–º–µ–Ω–∞
        string1 = "JJD";
        string1 = string1.replace("J", "!"); // !!D
        System.out.println(string1);
        string1 = "JJD";
        string1 = string1.replaceAll("J", "!"); // !!D
        System.out.println(string1);
        string1 = "JJD";
        string1 = string1.replaceFirst("J", "!");
        System.out.println(string1);

        System.out.println(string1.contains("D"));

        string1 = "Java, Python, PHP";
        String[] strings = string1.split(", ");
        System.out.println(Arrays.toString(strings));

        // —É–±—Ä–∞—Ç—å –ø—Ä–æ–±–µ–ª—ã trim / strip / stripLeading / stripTrailing
        System.out.println("\u3000");
        System.out.println("\u0020");
        // trim - —É–±–∏—Ä–∞–µ—Ç –ø—Ä–æ—Å—Ç—Ä–∞–Ω—Å–≤–æ –º–µ–Ω—å—à–µ –∏–ª–∏ —Ä–∞–≤–Ω–æ u0020
        // strip (J11) - —É–±–∏—Ä–∞–µ—Ç –ª—é–±–æ–µ –ø—Ä–æ—Å—Ç—Ä–∞–Ω—Å–≤–æ
        // stripLeading (J11) - —É–±–∏—Ä–∞–µ—Ç –ª—é–±–æ–µ –ø—Ä–æ—Å—Ç—Ä–∞–Ω—Å–≤–æ (–Ω–∞—á–∞–ª–æ —Å—Ç—Ä–æ–∫–∏)
        // stripTrailing (J11) - —É–±–∏—Ä–∞–µ—Ç –ª—é–±–æ–µ –ø—Ä–æ—Å—Ç—Ä–∞–Ω—Å–≤–æ (–∫–æ–Ω–µ—Ü —Å—Ç—Ä–æ–∫–∏)

        System.out.printf("—Å—Ç—Ä–æ–∫–∞ '%s', '%f'\n", " qwe  ".trim(), 34.44);
        System.out.printf("—Å—Ç—Ä–æ–∫–∞ '%f'\n", 11.6);
        System.out.printf("—Å—Ç—Ä–æ–∫–∞ '%d'\n", 566);

    }
}
